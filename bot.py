import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

API_TOKEN = os.getenv('API_TOKEN')

user_scores = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("ü¶ò –ö–ª–∏–∫ “õ–∏–ª–∏—à", callback_data='click')],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–°–∞–ª–æ–º, {user.first_name}! –ú–µ–Ω –ö–µ–Ω–≥—É—Ä—É –ö–ª–∏–∫–µ—Ä –±–æ—Ç–∏–º–∞–Ω. –ö–µ–Ω–≥–∫–æ–∏–Ω –π–∏“ì–∏—à —É—á—É–Ω ü¶ò —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in user_scores:
        user_scores[user_id] = 0

    if query.data == 'click':
        user_scores[user_id] += 1
        await query.answer(text=f"–°–∏–∑–¥–∞ –∫–µ–Ω–≥–∫–æ–∏–Ω–ª–∞—Ä: {user_scores[user_id]}")
    elif query.data == 'profile':
        score = user_scores.get(user_id, 0)
        await query.answer()
        await query.edit_message_text(text=f"üìä –°–∏–∑–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª: {score} –∫–µ–Ω–≥–∫–æ–∏–Ω")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω /start —ë–∑–∏–Ω–≥ –≤–∞ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥.")

def main():
    app = ApplicationBuilder().token(API_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button))

    print("–ë–æ—Ç –∏—à–≥–∞ —Ç—É—à–¥–∏...")
    app.run_polling()

if __name__ == '__main__':
    main()
